generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  university
  moderator
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(student)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model University {
  id        String   @id @default(cuid())
  name      String
  city      String
  country   String
  tags      String[]
  rating    Float    @default(4.0)
  reviews   Int      @default(0)
  employability Int?    // % hired within 6-12 months
  scholarships  Int?    // number of active scholarships
  housingScore  Int?    // 1-100 composite score
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviewItems Review[]
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  universityId String
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
}
